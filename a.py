# -*- coding: utf-8 -*-
#####################################################
#    This program was created by/ Eng.Asser Tantawy #
#            Date: 17/12/2021                       #
#                   V:1.0                           #
#            Thnx Eng Mo Hesham                     #
######################################################
# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
#from playsound import playsound

def getABC(A_String):
    rows = A_String.split("\n")  # split string in evry new line
    A_mat = []  # empty list
    # print('this rows',rows) #this rows ['1 1 -1 0', '0 -1 0 1', '-1 0 1 -1']
    for i in rows:  # looping on every string in list row
        columns = i.split(" ")  # list of first string in list rows
        columns = [eval(item) for item in columns]  # make it eval
        A_mat.append(columns)  # adding it to A list
    A = np.array(A_mat)  # make it Matrix
    # barnches_num=A.shape[1] # useless line
    new_row = [-1 * sum(A[:, i]) for i in range(A.shape[1])]  # making new row to complete the matrix
    isFullMat = (1 or -1) not in new_row  # check if full or not
    if (not isFullMat):  # check if not full  to add the new row
        A_mat.append(new_row)  # add new list to list
        A = np.array(A_mat)  # make it matrix
    nodes = A.shape[0]  # get the number of the node (number of rows)
    links_num = A.shape[1] - nodes + 1  # number of links number of branches

    if (nodes == A.shape[1] - links_num):  # check the AT is it square or not (rows == columns )
        A_Tree = A[:, :-1 * (A.shape[1] - links_num)]  # getting A tree columns only (A - link columns)
        A_Link = A[:, -1 * links_num:]  # getting A link columns only (A - tree columns)

    else:  # A tree not square
        A_Tree = A[:-1, :-1 * (A.shape[1] - links_num)]  # getting A tree without the last row
        A_Link = A[:-1, -1 * links_num:]  # getting A link without the last row
    C_Link = np.dot(np.linalg.inv(A_Tree), A_Link)  # CL =AT^-1 . AL
    Cut_set = np.concatenate((np.identity(C_Link.shape[0]), C_Link), 1)  # calculate Cutset CL + I
    B_Tree = -1 * C_Link.T  # BT = -CL trans
    Tie_set = np.concatenate((B_Tree, np.identity(B_Tree.shape[0])), 1)  # calculate Teiset CL + I

    return A, Tie_set, Cut_set


def get_JB_VB(B, ZB, EB, IB):
    zmat = list(ZB.split())  # ZB edit line AS I/P
    Zb_diag = []  # make
    for item in zmat:
        Zb_diag.append(eval(item))
    ZB_matrix = np.diag(Zb_diag)
    # print(ZB_matrix)
    bzb_bt = np.dot(B, np.dot(ZB_matrix, np.transpose(B)))
    # print(bzb_bt)
    eb_matrix = EB.split()  # editline as I/P
    EB_matrix = []
    for item in eb_matrix:
        EB_matrix.append(eval(item))
    # print(EB_matrix)
    B_EB = np.dot(B, EB_matrix)  # B mat * EB MAT
    # print(B_EB)
    IL = np.dot(np.linalg.inv(bzb_bt), B_EB)  # IL MAT
    # print(IL)
    JB = np.dot(np.transpose(B), IL)  # JB MATrix every current in circuit
    # print(JB)
    iblist = IB.split()
    IB_MAT = []
    for item in iblist:
        IB_MAT.append(eval(item))
    VB = []
    jbpulsib = JB + IB_MAT
    # print(jbpulsib)
    VB = (np.dot(ZB_matrix, jbpulsib)) - EB_matrix
    # print(VB)
    return JB, VB


a = '''1 1 -1 0
0 -1 0 1
-1 0 1 -1'''
A, B, C = getABC(a)
print("tie set:\n", B)
print("Cut set:\n", C)
print("A:\n", A)
JB, VB = get_JB_VB(ZB='5 10 5 5', B=B, EB='0 0 10 0', IB='0 0 0 0')

print("I:\n", JB)
print("V\n", VB)

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(751, 544)
        font = QtGui.QFont()
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        MainWindow.setFont(font)
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Thesquid.ink-Free-Flat-Sample-Owl.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("background-color:rgb(30,110,165)")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.welcom_mass = QtWidgets.QLabel(self.centralwidget)
        self.welcom_mass.setGeometry(QtCore.QRect(0, 0, 751, 131))
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(24)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.welcom_mass.setFont(font)
        self.welcom_mass.setStyleSheet("background-color:rgb(38,139,207)")
        self.welcom_mass.setFrameShape(QtWidgets.QFrame.Panel)
        self.welcom_mass.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.welcom_mass.setScaledContents(False)
        self.welcom_mass.setObjectName("welcom_mass")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(10, 140, 741, 81))
        self.textBrowser.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.textBrowser.setFrameShadow(QtWidgets.QFrame.Plain)
        self.textBrowser.setObjectName("textBrowser")
        self.A_MAT = QtWidgets.QTextEdit(self.centralwidget)
        self.A_MAT.setGeometry(QtCore.QRect(170, 240, 161, 131))
        self.A_MAT.setStyleSheet("background-color:rgb(243, 237, 255)")
        self.A_MAT.setObjectName("A_MAT")
        self.A_MATLABEL = QtWidgets.QLabel(self.centralwidget)
        self.A_MATLABEL.setGeometry(QtCore.QRect(10, 280, 151, 61))
        self.A_MATLABEL.setObjectName("A_MATLABEL")
        self.ZB_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.ZB_LABEL.setGeometry(QtCore.QRect(370, 270, 41, 51))
        self.ZB_LABEL.setObjectName("ZB_LABEL")
        self.ZB = QtWidgets.QLineEdit(self.centralwidget)
        self.ZB.setGeometry(QtCore.QRect(420, 280, 171, 31))
        self.ZB.setStyleSheet("background-color:rgb(243, 237, 255)")
        self.ZB.setObjectName("ZB")
        self.EB = QtWidgets.QLineEdit(self.centralwidget)
        self.EB.setGeometry(QtCore.QRect(420, 330, 171, 31))
        self.EB.setStyleSheet("background-color:rgb(243, 237, 255)")
        self.EB.setObjectName("EB")
        self.EB_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.EB_LABEL.setGeometry(QtCore.QRect(370, 330, 41, 31))
        self.EB_LABEL.setObjectName("EB_LABEL")
        self.IB = QtWidgets.QLineEdit(self.centralwidget)
        self.IB.setGeometry(QtCore.QRect(420, 240, 171, 31))
        self.IB.setStyleSheet("background-color:rgb(243, 237, 255)")
        self.IB.setObjectName("IB")
        self.IB_LABEL = QtWidgets.QLabel(self.centralwidget)
        self.IB_LABEL.setGeometry(QtCore.QRect(370, 240, 41, 31))
        self.IB_LABEL.setObjectName("IB_LABEL")
        self.GO = QtWidgets.QPushButton(self.centralwidget)
        self.GO.setGeometry(QtCore.QRect(290, 400, 151, 51))
        font = QtGui.QFont()
        font.setFamily("Bell MT")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.GO.setFont(font)
        self.GO.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.GO.setStyleSheet("background-color:rgb(38,207,191)")
        self.GO.setObjectName("GO")
        self.GO.clicked.connect(self.pop)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 751, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")

        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def pop(self):
     msg = QMessageBox()
     try:
        A_matrix = (self.A_MAT.toPlainText())
        ZB_matrix = self.ZB.text()
        IB_matrix = self.IB.text()
        EB_matrix = self.EB.text()
         #playsound('WhatsApp Audio 2021-12-18 at 1.43.00 AM.mpeg')
        A , B, C  =  getABC(A_matrix)
        JB, VB = get_JB_VB(ZB=ZB_matrix, B=B, EB=EB_matrix, IB=IB_matrix)
        print('xxxxxxxxxxxxxxxxxxx')

        msg.setWindowTitle('Result')
        msg.setText('Tie-set    \n'+str(B)+'\n\n'+'Cut-set\n'+str(C)+'\n\nCurrent in every branch\n'+str(JB)+
                        '\n\nVoltage in every branch\n'+str(VB)+'\n \nThnx :D')
        x = msg.exec_()
     except:
         msg.setWindowTitle('ERROR')
         msg.setText('invalid input')
         x = msg.exec_()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CAD PROJECT"))
        self.welcom_mass.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" color:#f8eeff;\">Welcome To CAD Calculator</span></p></body></html>"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#90ffff;\">Enter the Incidence matrix every elment spreated by space and every row spreated by new line , Enter the current matrix   in IB entry , Enter the impedance Matrix in ZB entry ,</span></p>\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt; color:#90ffff;\">Enter the voltage source matrix in EB entry</span></p></body></html>"))
        self.A_MATLABEL.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">Incidence Matrix </span></p></body></html>"))
        self.ZB_LABEL.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">ZB</span></p></body></html>"))
        self.EB_LABEL.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">EB</span></p></body></html>"))
        self.IB_LABEL.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:12pt;\">IB</span></p></body></html>"))
        self.GO.setText(_translate("MainWindow", "GO!"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
